@{
    ViewData["Title"] = "Home";
}

<style>
    #dataContainer {
        margin-top: 20px;
    }

    .item {
        border: 1px solid #ddd;
        padding: 10px;
        margin-bottom: 10px;
        background-color: #f9f9f9;
    }
</style>

<h2>Welcome to the Home Page</h2>

<button id="loadPosts">Load Posts</button>
<button id="loadUsers">Load Users</button>

<div id="dataContainer"></div>

@section Scripts {
    <script>
        document.getElementById('loadPosts').addEventListener('click', async function () {
            const response = await fetch('/Home/GetPosts');
            if (response.ok) {
                const html = await response.text(); 
                document.getElementById('dataContainer').innerHTML = html;
            } else {
                console.error("Failed to load posts.");
            }
        });

        document.getElementById('loadUsers').addEventListener('click', async function () {
            const response = await fetch('/Home/GetUsers');
            if (response.ok) {
                const html = await response.text();
                document.getElementById('dataContainer').innerHTML = html;
            } else {
                console.error("Failed to load users.");
            }
        });
    </script>
}






@* 
---------------------- ViewModel Approch using Model & Razor Syntex ----------------------------

<!-- Use dynamic for flexibility -->
@model IEnumerable<dynamic> 

@{
    ViewData["Title"] = "Home";
}

<h1>Welcome to the Home Page</h1>

<a asp-action="GetPosts" class="btn btn-primary">Load Posts</a>
<a asp-action="GetUsers" class="btn btn-secondary">Load Users</a>

@if (Model != null && Model.Any())
{
    if (Model.First() is Post)
    {
        <h3>Posts</h3>
        @foreach (var post in Model.Cast<Post>())
        {
            <div class="item">
                <h4>@post.id</h4>
                <p>@post.title</p>
                <p>@post.body</p>
            </div>
        }
    }
    else if (Model.First() is User)
    {
        <h3>Users</h3>
        @foreach (var user in Model.Cast<User>())
        {
            <div class="item">
                <h4>@user.id</h4>
                <p>@user.name</p>
                <p>@user.username</p>
                <p>@user.email</p>
                <p>@user.phone</p>
                <p>@user.website</p>
            </div>
        }
    }
}
else
{
    <p>Click on "Load Posts" or "Load Users" to display data.</p>
}


*@






@* 
---------------------- Simple Approch to fetch data -------------------------------------- 
@{
    ViewData["Title"] = "Home Page";
}

<style>
    #dataContainer {
        margin-top: 20px;
    }

    .item {
        border: 1px solid #ddd;
        padding: 10px;
        margin-bottom: 10px;
        background-color: #f9f9f9;
    }
</style>



<div class="text-center">
    <h1 class="display-4">Welcome to the Home Page</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

<button id="loadPosts">Load Posts</button>
<button id="loadUsers">Load Users</button>

<div id="dataContainer"></div>

@section Scripts {
    <script>
        document.getElementById('loadPosts').addEventListener('click', async function() {
            const response = await fetch('/Home/GetPosts');
            if (response.ok) {
                const posts = await response.json();
                displayData(posts);
            }
        });

        document.getElementById('loadUsers').addEventListener('click', async function() {
            const response = await fetch('/Home/GetUsers');
            if (response.ok) {
                const users = await response.json();
                displayData(users);
            }
        });

        function displayData(data) {
            const container = document.getElementById('dataContainer');
            container.innerHTML = '';

            if (Array.isArray(data)) {
                data.forEach(item => {
                    const itemDiv = document.createElement('div');
                    itemDiv.className = 'item';
                    itemDiv.innerHTML = `<pre>${JSON.stringify(item, null, 2)}</pre>`;
                    container.appendChild(itemDiv);
                });
            }
        }
    </script>
}

*@